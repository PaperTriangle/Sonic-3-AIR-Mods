global u8 altlbz2cs.gameclear
global u8 altlbz2cs.removewalls
global bool altlbz2cs.fadeadjust
global bool altlbz2cs.removehud
global u8 altlbz2cs.hudgobye = 0

//# address-hook(0x072b46) end(0x072b94)
function void fn072b46()
{
	objA0.update_address = 0x072bbc
	addPatternLoadingCue(0x083d64)		// Boss explosion sprites
}

//# address-hook(0x072bbc) end(0x072c04)
function void fn072bbc()
{
	objA0.update_address = 0x072c0a
	objA0.flags38 |= 0x20	// This makes the explosions stop
	u16[0xfffffaa4] = A0.u16


	if (allocDynamicObjectStd())
	{
		objA1.update_address = 0x0863c0
	}

	Kosinski.addToDMAQueue(0x37921c, 0x95c0)		// Death Egg falling in the distance

	if (!Mods.isModActive("Origins Parity Galore") || !Game.getSetting(SETTING_LBZ_BIGARMS))
	{
		spawnSimpleChildObjects(0x072d24, 2)
	}
}

//# address-hook(0x072c0a) end(0x072c62)
function void fn072c0a()
{
	A1 = 0xffffb000

	player1.control_override = 0xff
	control.player1 = 0

	D0.s16 = camera.position.x.u16 + getScreenWidth() / 2 - objA1.position.x.u16
	if (abs(D0.s16) < 4)
	{
		objA0.update_address = 0x072c68
		u8[0xfffffa88] = 0
		StopObjectA1()

		objA1.render_flags &= ~render_flag.FLIP_X
		u8[A1 + 0x2a] &= ~char.flag.FACING_LEFT

		control.player1 = 0x0101		// CONTROL_UP, CONTROL_UP

	}
	else
	{
		D1 = (D0.s16 < 0) ? 2 : 3		// CONTROL_LEFT : CONTROL_RIGHT
		control.player1.state |= (1 << D1.u8)
	}
}

//# address-hook(0x072dea) end(0x072e4e)
function void fn072dea()
{

	--objA0.countdown_value
	if (objA0.countdown_value < 0)
	{
		++objA0.value39
		if (objA0.value39 == 0x08)
		{
			u8[0xffffeec6] = 0xff
		}

		if (objA0.value39 >= 0x18 && !altlbz2cs.fadeadjust)
		{
			objA0.update_address = 0x072e2e
			objA0.countdown_value = 0x003f
			
			u8[0xffffb000 + 0x2e] = 0x81
			u8[0xffffb000 + 0x20] = char.state.WIN_POSE
			StartCharacterWinPose()
			level.results_done = 0
			
			if (allocDynamicObjectStd())
			{
				// Level results
				objA1.update_address = addressof(LevelResults.Update)
			}
			
			if (allocDynamicObjectStd())
			{
				// Win pose for Tails
				objA1.update_address = 0x072cfa
			}
			
			Game.onZoneActCompleted(global.zone_act.apparent)
			
			fn072e2e()
			return
		}
		
		if (objA0.value39 >= 0xff && altlbz2cs.fadeadjust)
		{
			u16[A0 + 0x48] = 0
			objA0.update_address = 0x072e30
		}

		if (objA0.value39 < 0x18)
		{
			objA0.countdown_value = u16[A0 + 0x3a]
			++u16[A0 + 0x3a]
			if (allocDynamicObjectStd())
			{
				objA1.update_address = 0x072e54
			}
		}
	}
}

//# address-hook(0x072e30)
function void fn072e30()
{
	if (!altlbz2cs.fadeadjust || u16[A0 + 0x48] < 48)
	{
		base.fn072e30()
		return
	}

	if (u16[A0 + 0x48] == 48)
	{
		if (Mods.isModActive("Better Big Arm Fade"))
		{
			u16[0xfffffc00 + 0x3b * 2] = System.getGlobalVariableValueByName("bigarmfade.p1")
			u16[0xfffffc00 + 0x3c * 2] = System.getGlobalVariableValueByName("bigarmfade.p2")
			u16[0xfffffc00 + 0x3d * 2] = System.getGlobalVariableValueByName("bigarmfade.p3")
			u16[0xfffffc00 + 0x3e * 2] = System.getGlobalVariableValueByName("bigarmfade.p4")
		}
		else
		{
			u16[0xfffffc00 + 0x3b * 2] = 0x0ece
			u16[0xfffffc00 + 0x3c * 2] = 0x0e8a
			u16[0xfffffc00 + 0x3d * 2] = 0x0e48
			u16[0xfffffc00 + 0x3e * 2] = 0x0e46
		}

	}
	else if (u16[A0 + 0x48] == 68)
	{
		objA0.update_address = 0x072e2e
		objA0.countdown_value = 0x003f
		
		u8[0xffffb000 + 0x2e] = 0x81
		u8[0xffffb000 + 0x20] = char.state.WIN_POSE
		StartCharacterWinPose()
		level.results_done = 0
		
		if (allocDynamicObjectStd())
		{
			// Level results
			objA1.update_address = addressof(LevelResults.Update)
		}
		
		if (allocDynamicObjectStd())
		{
			// Win pose for Tails
			objA1.update_address = 0x072cfa
		}
		
		Game.onZoneActCompleted(global.zone_act.apparent)
		
		fn072e2e()
		return
	}
	
	++u16[A0 + 0x48]
}

//# address-hook(0x072e2e)
function void fn072e2e()
{
	if (!level.results_done)
		return
	
	if (altlbz2cs.removehud)
	{
		if (altlbz2cs.hudgobye < 0x80)
			altlbz2cs.hudgobye = altlbz2cs.hudgobye + 8
			
		if Mods.isModActive("Transform Button HUD")	
		{
			System.setGlobalVariableValueByName("hidesuper", System.getGlobalVariableValueByName("hidesuper") + 13)
			if (System.getGlobalVariableValueByName("hidesuper") >= 100)
				ring_counter = 0
				
		}
	}
	
	if (!altlbz2cs.gameclear || Mods.isModActive("Music Cues Customization"))
	{
		if (!Mods.isModActive("Music Cues Customization"))
		{
			PlayMusicAfterLevelResults()
		}
		control.player1 = 0
		stopCharacterWinPose(0xffffb000)
		stopCharacterWinPose(0xffffb04a)
	}

	if (Mods.isModActive("LBZ Eggman Fleeing"))
	{
		System.setGlobalVariableValueByName("cutscenenumer", 383)
		System.setGlobalVariableValueByName("ZNA_LBZEF_starttime", timer.alldata)
	}
	
	--objA0.countdown_value
	if (objA0.countdown_value >= 0)
		return

	if (Mods.isModActive("Music Cues Customization"))
	{
		fn072b96() // Calling this function here seems fine for compat since I skip from 0x072b46 straight to 0x072bbc
	}

	u8[0xfffffa88] |= 0x01
	objA0.value39 = 0
	objA0.countdown_value = 0
	
	stopCharacterWinPose(0xffffb000)
	stopCharacterWinPose(0xffffb04a)

	// "spawnChildObjects(0x07380c)" replaced by:
	spawnChildObject(0x072e9e, 0x00, 0, 0)
	spawnChildObject(0x072e9e, 0x02, -16, 40)
	spawnChildObject(0x072e9e, 0x04, -112, 0)
	spawnChildObject(0x072e9e, 0x06, -72, 40)
	spawnChildObject(0x072e9e, 0x08, 24, 16)
	spawnChildObject(0x072e9e, 0x0a, -36, -8)
	spawnChildObject(0x072e9e, 0x0c, -80, 28)

#if STANDALONE
	if (Game.getSetting(SETTING_LBZ_BIGARMS) && !altlbz2cs.fadeadjust)
	{
		// Go into another state before unloading, to lighten up the sky again
		u16[A0 + 0x48] = 0
		objA0.update_address = 0x072e30
	}
	else
#endif
	{
		Object.TriggerUnloading()
	}
}

function u64 Standalone.getModdedSoundKey(u64 soundKey, u8 sfxId, u8 soundRegType)
{
	if (!Mods.isModActive("Music Cues Customization"))
	{
		if (altlbz2cs.gameclear && camera.position.y.u16 > 0x0500 && global.zone_act == 0x0601)
		{
			if (soundKey == MUSIC_LEVELCLEAR)
			{
				return soundKey = MUSIC_GAMECLEAR
			}
		}
	}
	
    return base.Standalone.getModdedSoundKey(soundKey, sfxId, soundRegType)
}

// Stops the invisible walls from being spawned
// and spawns updrafts if needed
//# address-hook(0x08d47c) end(0x08d4c6)
function void fn08d47c()
{
	if (altlbz2cs.removewalls == 0)
	{
		base.fn08d47c()
		return
	}
	
	fn0847e6()
	UpdateMovementStraightSimple()
	fn08d506()

	if (objA0.position.x.u16 >= 0x4440)
	{
		// Character jumps out of the mobile
		objA0.update_address = 0x08d4cc
		camera.screenshake.state = 0

		A1 = 0xffffb000
		objA1.velocity.x = -0x100
		objA1.velocity.y = -0x600
		objA1.state = char.state.ROLLING
		objA1.flags2a |= char.flag.IN_AIR
		u8[A1 + 0x2e] = 0
		u8[A1 + 0x40] = 0

	#if STANDALONE
		Game.endSkippableCutscene()

		if (altlbz2cs.removewalls == 1)
		{
			// Create updraft elements so the player cannot fall off the platform
			for (u16 i = 0; i < 2; ++i)
			{
				if (allocDynamicObjectStd())
				{
					objA1.update_address = 0x03fb90
					objA1.position.x.u16 = (i == 1) ? 0x4519 : 0x4347
					objA1.position.y.u16 = 0x0755
					objA1.subtype2c = 0x01
				}
			}
		}
	#endif
	}

	fn08d53e()
	DrawObject()
}

// Fix for getting hurt and falling into updrafts
//# address-hook(0x03fbc4) end(0x03fcd2)
function void fn03fbc4()
{
	if (altlbz2cs.removewalls != 1)
	{
		base.fn03fbc4()
		return
	}

	if (global.zone == 0x06 && (camera.position.x.u16 > 0x4350 && u16[A1 + 0x14] > 0x072c) && u8[A1 + 0x05] == base_state.HURT)
	{
		u8[A1 + 0x05] = base_state.NORMAL
	}
	
	base.fn03fbc4()
}

// HUD removal script
//# address-hook(0x00db44) end(0x00dbb2)
function void RenderHUD()
{
	if (debug_mode.state || !altlbz2cs.removehud || altlbz2cs.hudgobye == 0)
	{
		base.RenderHUD()
		return
	}
	

#if STANDALONE
	if (DEBUG_DISABLE_HUD)
		return
#endif

	s16 baseX = global.level_started
	if (baseX < 0)
	{
		baseX += 8
		global.level_started = baseX
	}
	baseX += 0x0f
	s16 baseY = 0x08
	u16 renderQueue = 0xe000

	// Score
	HUD.drawSprite("hud_text_score", baseX - altlbz2cs.hudgobye, baseY, renderQueue)
	++renderQueue
	HUD.drawNumber("hud_digit_%d", player.score * 10, baseX - altlbz2cs.hudgobye + 0x58, baseY, renderQueue)
	++renderQueue

	// Time
	{
		bool show = (timer.minutes < 9 || (level.framecounter & 0x08) || Game.getSetting(SETTING_INFINITE_TIME))
		HUD.drawSprite(show ? "hud_text_time" : "hud_text_time_red", baseX - altlbz2cs.hudgobye, baseY + 0x10, renderQueue)
		++renderQueue

		// Unfortunately, the time progress is done later inside the frame, so we don't have the right value in "timer.frames" yet
		//  -> If the conditions for time progress are met, add one and everything will be alright
		u16 minutes = timer.minutes
		u16 seconds = timer.seconds
		u16 frames = timer.frames
		if (hud.dirty.timer && !global.game.paused && timer.alldata < 0x93b3b)	// That is 9:59 and 59 frames
		{
			++frames
			seconds += (frames / 60)
			minutes += (seconds / 60)
			frames %= 60
			seconds %= 60
		}
		u16 centiseconds = (frames * 99 + 30) / 59

		u16 px = (minutes >= 10) ? (baseX - altlbz2cs.hudgobye + 8) : baseX - altlbz2cs.hudgobye
		if (Game.getSetting(SETTING_EXTENDED_HUD))
		{
			if (minutes >= 10)
				HUD.drawDigit(minutes / 10, px + 0x20, baseY + 0x10, renderQueue)
			HUD.drawDigit(minutes % 10, px + 0x28, baseY + 0x10, renderQueue)
			HUD.drawSprite("hud_char_minutes", px + 0x30, baseY + 0x10, renderQueue)
			HUD.drawDigit(seconds / 10, px + 0x38, baseY + 0x10, renderQueue)
			HUD.drawDigit(seconds % 10, px + 0x40, baseY + 0x10, renderQueue)
			HUD.drawSprite("hud_char_seconds", px + 0x48, baseY + 0x10, renderQueue)
			HUD.drawDigit(centiseconds / 10, px + 0x50, baseY + 0x10, renderQueue)
			if (minutes < 10)
				HUD.drawDigit(centiseconds % 10, px + 0x58, baseY + 0x10, renderQueue)
		}
		else
		{
			if (minutes >= 10)
				HUD.drawDigit(minutes / 10, px + 0x20, baseY + 0x10, renderQueue)
			HUD.drawDigit(minutes % 10, px + 0x28, baseY + 0x10, renderQueue)
			HUD.drawSprite("hud_char_colon", px + 0x30, baseY + 0x10, renderQueue)
			HUD.drawDigit(seconds / 10, px + 0x38, baseY + 0x10, renderQueue)
			HUD.drawDigit(seconds % 10, px + 0x40, baseY + 0x10, renderQueue)
		}
		++renderQueue
	}
	
	// Rings
	{
		u16 py = baseY + 0x20
		bool show = (ring_counter != 0 || (level.framecounter & 0x08))
		HUD.drawSprite(show ? "hud_text_rings" : "hud_text_rings_red", baseX - altlbz2cs.hudgobye, py, renderQueue)
		++renderQueue

		u16 px = baseX - altlbz2cs.hudgobye + (Game.getSetting(SETTING_EXTENDED_HUD) ? 0x58 : 0x40)
		for (u32 value = ring_counter;;)
		{
			HUD.drawDigit(value % 10, px, py, renderQueue)
			px -= 8
			value /= 10
			if (value == 0)
				break
		}
		++renderQueue
	}

	// Lives (not visible in Time Attack or with infinite lives setting)
	if (!Game.isTimeAttack() && !Game.getSetting(SETTING_INFINITE_LIVES))
	{
		bool useMobilePosition = HUD.useMobileLivesDisplay()
		u16 px = useMobilePosition ? (getScreenWidth() - baseX - altlbz2cs.hudgobye - 0x30) : baseX - altlbz2cs.hudgobye
		u16 py = useMobilePosition ? baseY : 200

		HUD.drawSprite(getCharacterLivesIcon(getMainCharacter()), px, py, renderQueue)
		++renderQueue

		if (lives_counter >= 10)
			HUD.drawSmallDigit(u16((lives_counter / 10) % 10), px + 0x20, py + 8, renderQueue)
		HUD.drawSmallDigit(u16(lives_counter % 10), px + 0x28, py + 8, renderQueue)
	}

}

//# address-hook(0x085e3a) end(0x085e50)
function void TriggerNextZone()
{
	altlbz2cs.hudgobye = 0
	base.TriggerNextZone()
}

// Origins Parity Galore Compatability 
//# address-hook(0x0746f4) end(0x074734)
function void fn0746f4()
{
	base.fn0746f4()

	if (Mods.isModActive("Origins Parity Galore"))
    {
		if (camera.position.y.u16 >= 0x0500)
		{
			if (System.getGlobalVariableValueByName("OPG_EggTimer") == 2)
			{
				spawnSimpleChildObjects(0x072d24, 2)
				System.setGlobalVariableValueByName("OPG_EggTimer", 3)
			}
		}
	}
}