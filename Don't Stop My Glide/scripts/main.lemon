define u8 global.xtrachar	= u8[0xffffe654]

//---------------
// Knuckles Walls
//---------------

function void Rocks.BreakWall()
{
	fn01ff1e()
	if (competition_mode.active == 0)
	{
		objA1.velocity.x = D1.u16
		D0.u16 = objA0.position.x.u16
		if (D0.u16 >= objA1.position.x.u16)
		{
			objA1.position.x.u16 -= 4
			A4 = 0x020314
		}
		else
		{
			objA1.position.x.u16 += 4
			A4 = 0x0202f4
		}

		objA1.groundspeed = objA1.velocity.x
		u8[A1 + 0x2a] &= ~char.flag.PUSHING
		if (u8[A1 + 0x38] == CHARACTER_KNUCKLES && u8[A1 + 0x2f] == 0x01)
		{
			if (objA1.velocity.x < 0)
				objA1.groundspeed = -1 * objA1.velocity.x
		}
		


		D0 = objA0.animation.sprite
		if (global.zone == 0x09)		// Lava Reef Zone
		{
			D0 = (D0 - 4) * 2
			objA0.update_address = 0x01fc66
			fn0201de()
		}
		else
		{
			D0 *= 2
			objA0.update_address = 0x01fc16
			fn02013a()
		}
		fn01fc16()

	#if STANDALONE
		// Prevent this object from respawning
		//  -> Otherwise the rocks next to the first AIZ 1 giant ring may respawn after the special stage
		objA0.respawn_entry = 0
	#endif
	}
	else
	{
		// Competition mode code
		objA1.velocity.x = D1.u16
		D0.u16 = objA0.position.x.u16
		if (D0.u16 >= objA1.position.x.u16)
		{
			objA1.position.x.u16 -= 4
			A4 = 0x020388
		}
		else
		{
			objA1.position.x.u16 += 4
			A4 = 0x020370
		}

		objA1.groundspeed = objA1.velocity.x
		u8[A1 + 0x2a] &= ~char.flag.PUSHING
		fn01fcc8()
		objA0.update_address = 0x01fcae
		objA0.animation.sprite = 3
		D0 = objA0.animation.sprite * 2
		fn02013a()
		fn01fcae()
	}
}

function void fn0218ce()
{
	objA1.velocity.x = D1.u16
	if (objA0.position.x.u16 >= objA1.position.x.u16)
	{
		objA1.position.x.u16 -= 4
		A4 = u32[A0 + 0x38]
	}
	else
	{
		objA1.position.x.u16 += 4
		A4 = objA0.countdown_callback
	}

	objA1.groundspeed = objA1.velocity.x
	objA1.flags2a &= ~char.flag.PUSHING
	if (u8[A1 + 0x38] == CHARACTER_KNUCKLES && u8[A1 + 0x2f] == 0x01)
	{
		if (objA1.velocity.x < 0)
			objA1.groundspeed = -1 * objA1.velocity.x
	}

	objA0.update_address = 0x021692
	++objA0.animation.sprite

	Wall.Destroy()
	fn021692()
}

#if STANDALONE
function void AIZ1a.checkPreBossArea()
{
	// Skip check for boss in Time Attack
	if (Game.isTimeAttack())
		return

	// Using the upper or the lower path?
	bool isOnUpperPath = (camera.position.y.u16 < 0x400 && char.position.y.u16 < 0x400)

	if (isOnUpperPath)
	{
		D0.u16 = (camera.position.x.u16 >= 0x0ed0) ? 0x02b8 : 0x0590
	}
	else
	{
		D0.u16 = (camera.position.x.u16 >= 0x0e80) ? 0x0450 : 0x0590
	}
	move_area.bottom.current = D0.u16
	move_area.bottom.target = D0.u16

	if (isOnUpperPath)
	{
		if (camera.position.x.u16 >= 0x0f50)
		{
			move_area.left = 0x0f50
			// Choose boss area depending on which route has been taken, not the character selection
			//  -> Search for this same comment to find another place with similar code
			move_area.right = ((camera.position.y.u16 >= 0x03a0) ? 0x10c0 : 0x10e0) + getScreenExtend()

			if (debug_mode.state == 0)
			{
				if (allocDynamicObjectStd())
				{
					// Trigger boss
					objA1.update_address = addressof(Boss.AIZ1.BaseUpdate)
					objA1.position.x.u16 = 0x11f0
					objA1.position.y.u16 = 0x0289
				}
			}
			camera.update_routine = 0x06
		}
	}
	else
	{
		if (camera.position.x.u16 >= 0x1040)
		{
			move_area.left = 0x1040
			if (debug_mode.state == 0)
			{
				if (allocDynamicObjectStd())
				{
					// Trigger boss
					objA1.update_address = addressof(Boss.AIZ1.BaseUpdate)
					objA1.position.x.u16 = 0x11d0
					objA1.position.y.u16 = 0x0420
				}
			}
			water.height.target = 0x0f80
			camera.update_routine = 0x16
		}
	}
}
#endif